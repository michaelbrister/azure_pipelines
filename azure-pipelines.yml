trigger:
  branches:
    include:
      - dev
      - stage
      - main

stages:

  # üèó Build Stage
  - stage: Build
    jobs:
      - job: Build
        steps:
          - script: echo "Building the application"
          - script: dotnet build
          - script: dotnet test
          - script: dotnet publish -c Release -o $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: drop

  # üß™ Testing Stage (Modularized)
  - stage: Testing
    jobs:
      - template: test-template.yml

  # üîç Security Scanning Stage (Modularized)
  - stage: Security_Scanning
    jobs:
      - template: security-template.yml

  # üöÄ Deployment to Dev
  - stage: Deploy_Dev
    condition: eq(variables['Build.SourceBranchName'], 'dev')
    jobs:
      - template: deploy-template.yml
        parameters:
          environment: 'Development'
          appName: 'myapp-dev'
          slotName: 'staging-slot'

  # üöÄ Deployment to Staging
  - stage: Deploy_Stage
    condition: eq(variables['Build.SourceBranchName'], 'stage')
    jobs:
      - template: deploy-template.yml
        parameters:
          environment: 'Staging'
          appName: 'myapp-stage'
          slotName: 'staging-slot'

  # üöÄ Deployment to Production (Blue-Green, Rollback, Retry)
  - stage: Deploy_Prod
    condition: eq(variables['Build.SourceBranchName'], 'main')
    jobs:
      - job: Approval
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Confirm deployment to production'
              onTimeout: 'reject'

      - job: Deploy_Blue
        dependsOn: Approval
        steps:
          - script: echo "Deploying to Blue Slot"
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'AzureSubscription'
              appName: 'myapp-prod-blue'
              package: '$(Build.ArtifactStagingDirectory)'

      # üîç Deployment Validation & Retry Logic
      - job: Validate_Deployment
        dependsOn: Deploy_Blue
        steps:
          - script: echo "Verifying Deployment..."
          - retryCount: 3  # Retries up to 3 times before failing
          - script: |
              response=$(curl -s https://myapp-prod-blue.azurewebsites.net/health)
              if [[ "$response" != "healthy" ]]; then
                echo "‚ùå Deployment validation failed! Retrying..."
                exit 1

          - task: TeamsNotification@1
            condition: failed()
            inputs:
              teamsWebhookUrl: 'https://outlook.office.com/webhook/...'
              message: |
                ‚ö† **Deployment Validation Failed**  
                - Retrying validation (Attempt $(System.RetryCount) of 3)  
                - Timestamp: $(Build.BuildId)

      # üö® Automatic Rollback on Failure
      - job: Rollback
        condition: failed()
        dependsOn: Validate_Deployment
        steps:
          - script: echo "Rolling back to previous stable version"
          - script: az webapp deployment slot swap -n myapp-prod -s previous-slot

          - task: SendEmail@1
            inputs:
              to: 'devops-team@example.com'
              subject: 'üö® Deployment Rollback Alert!'
              body: |
                The deployment failed, triggering an automatic rollback.
                - Timestamp: $(Build.BuildId)
                - Check logs for details.

      # ‚úÖ Swap Slots Only If Deployment Succeeds
      - job: Swap_Slots
        condition: succeeded()
        dependsOn: Validate_Deployment
        steps:
          - script: echo "Swapping Blue Slot with Production"
          - script: az webapp deployment slot swap -n myapp-prod -s blue

